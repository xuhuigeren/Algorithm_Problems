/*
请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。
例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。


示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 

提示：
输入必须是长度为 32 的 二进制串 。

*/

//  n&(n−1)
/*
算法流程：
初始化数量统计变量 res
循环消去最右边的 11 ：当 n = 0 时跳出。
res += 1 ： 统计变量加 1；
n &= n - 1 ： 消去数字 n 最右边的 1 。
返回统计数量 res
*/
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res = 0;
        while(n){
            ++res;
            n = (n-1)&n;
        }
        return res;
        
    }
};


/*
逐位判断
算法流程：
初始化数量统计变量 res = 0
循环逐位判断： 当 n = 0时跳出。
res += n & 1 ： 若 n&1=1 ，则统计数 res 加一。
n >>= 1 ： 将二进制数字 n 无符号右移一位
*/

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res = 0;
        while(n){
            res += n&1;
            n = n>>1;
        }
        return res;
        
    }
};